---
services:
  badgr:
    build:
      context: .
      dockerfile: ./docker/dev.Dockerfile
    container_name: badgr
    volumes:
      - .:/app:Z
    working_dir: /app
    environment:
      # Be sure to set BADGR_DB_PASSWORD when running docker-compose
      - ACCOUNT_SALT=secret
      - ALLOW_SEEDS=1
      - BADGR_APP_ID=1
      - BADGR_DB_HOST=postgres
      - BADGR_DB_NAME=badgr
      - BADGR_DB_PASSWORD=${BADGR_DB_PASSWORD}
      - BADGR_DB_PORT=5432
      - BADGR_DB_USER=badgr
      - DEBUG=1
      - DEFAULT_DOMAIN=http://0.0.0.0:8000
      - DEFAULT_FROM_EMAIL=noreply@surf.nl
      - DOMAIN=0.0.0.0:8000
      - EDUID_PROVIDER_URL=https://connect.test.surfconext.nl/oidc
      - EDU_ID_CLIENT=ewi.backpack.edubadges
      - EDUID_REGISTRATION_URL=https://login.test.eduid.nl/register
      - EDU_ID_CLIENT=edubadges
      - EDU_ID_SECRET=${EDU_ID_SECRET}
      - EDUID_IDENTIFIER=sub
      - EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
      - EMAIL_USE_TLS=0
      - EMAIL_HOST=mailhog
      - EMAIL_PORT=1025
      - LTI_FRONTEND_URL=localhost
      - MEMCACHED=memcached:11211
      - OIDC_RS_ENTITY_ID=test.edubadges.rs.nl
      - OIDC_RS_SECRET=${OIDC_RS_SECRET}
      - PYTHONUNBUFFERED=1
      - ROOT_INFO_SECRET_KEY=secret
      - SITE_ID=1
      - SUPERUSER_EMAIL=superuser@example.com
      - SUPERUSER_NAME=superuser
      - SUPERUSER_PWD=secert
      - SURF_CONEXT_CLIENT=test.edubadges.nl
      - SURF_CONEXT_CLIENT=www.edubadges.nl
      - SURF_CONEXT_SECRET=${SURF_CONEXT_SECRET}
      - TIME_STAMPED_OPEN_BADGES_BASE_URL=http://0.0.0.0:8000/
      - UI_URL=http://localhost:8080
      - UNSUBSCRIBE_SECRET_KEY=secret
      - OB3_AGENT_URL_UNIME=https://agent.poc9.eduwallet.nl/v0/offers
      - OB3_AGENT_URL_SPHEREON=https://agent.poc15.eduwallet.nl/oid4vci/admin/credentials
      - OB3_AGENT_AUTHZ_TOKEN_SPHEREON=${OB3_AGENT_AUTHZ_TOKEN_SPHEREON}
      - EXTENSIONS_ROOT_URL=http://localhost:8000/static
      - AWS_ACCESS_KEY_ID=edubadges
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_CUSTOM_DOMAIN=minio:9000
      - AWS_STORAGE_BUCKET_NAME=edubadges
      - AWS_S3_USE_SSL=False
    networks:
      - shared-network
      - edubadges-server
    depends_on:
      db:
        condition: service_healthy
      memcached:
        condition: service_started
      mailhog:
        condition: service_started
      minio-init:
        condition: service_started
    ports:
      - "8000:8000"

  db:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_DB: badgr
      POSTGRES_USER: badgr
      POSTGRES_PASSWORD: ${BADGR_DB_PASSWORD}
    ports:
      - "5432:5432"
    # Health check for PostgreSQL
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U badgr -d badgr" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      # Note: PG 17 and up this path will change: https://hub.docker.com/_/postgres#pgdata
      - db-data:/var/lib/postgresql/data
    networks:
      - edubadges-server

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - edubadges-server

  memcached:
    image: memcached:latest
    container_name: memcached
    networks:
      - edubadges-server

  minio:
    image: quay.io/minio/minio:RELEASE.2025-04-22T22-12-26Z
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks:
      - edubadges-server
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5

  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./docker/minio-init.sh:/minio-init.sh
    entrypoint: /bin/sh
    command: [ "/minio-init.sh" ]
    environment:
      - MC_HOST_minio=http://minioadmin:minioadmin@minio:9000
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    networks:
      - edubadges-server

networks:
  shared-network:
    external: true
  edubadges-server:
    driver: bridge

volumes:
  db-data:
  minio-data:
